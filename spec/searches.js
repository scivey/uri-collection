// Generated by CoffeeScript 1.6.3
(function() {
  var URI, URICollection, URLCOUNT, URL_INDICES, assert, isURI, urlList, _, _i, _ref, _ref1, _results;

  assert = require("better-assert");

  _ = require("underscore");

  _ref = require("../index.js"), URICollection = _ref.URICollection, isURI = _ref.isURI;

  URI = require("URIjs");

  urlList = ["http://www.google.com/foo", "http://www.cnn.com/theNewsIGuess", "http://www.foo.com/index.html", "http://www.powwow.net", "http://www.genericrecipes.net", "http://ihavefeelingsandiwriteaboutthem.wordpress.com", "http://justcats.tumblr.com"];

  URLCOUNT = urlList.length;

  URL_INDICES = (function() {
    _results = [];
    for (var _i = 0, _ref1 = URLCOUNT - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; 0 <= _ref1 ? _i++ : _i--){ _results.push(_i); }
    return _results;
  }).apply(this);

  describe("URICollection", function() {
    var collection, _urls;
    _urls = _.clone(urlList);
    collection = {};
    beforeEach(function() {
      return collection = new URICollection(_urls);
    });
    describe("find", function() {
      var findCollection, subUrls;
      subUrls = [];
      findCollection = {};
      beforeEach(function() {
        subUrls = ["http://www.burgerking.com/", "http://www.sploink.net/", "http://www.cowsjustcows.org/", "http://www.sploink.net/different.html"];
        return findCollection = new URICollection(subUrls);
      });
      it("should return a URIjs instance.", function() {
        var link;
        link = collection.find(function(elem) {
          return elem.domain() !== "";
        });
        return assert(link instanceof URI);
      });
      it("should return the first matching instance", function() {
        var subCollection, _found;
        subCollection = new URICollection(subUrls);
        _found = subCollection.find(function(link) {
          return link.domain() === "sploink.net";
        });
        return assert(_found.toString() === subUrls[1]);
      });
      return it("should return null if no match is found", function() {
        var _found;
        _found = findCollection.find(function(link) {
          return link.domain() === "tickleMeElmo.net";
        });
        return assert(_found === null);
      });
    });
    describe("findWhere", function() {
      var fwCollection, subUrls;
      subUrls = [];
      fwCollection = {};
      beforeEach(function() {
        subUrls = ["http://www.burgerking.com/", "http://www.sploink.net/", "http://www.cowsjustcows.org/", "http://www.sploink.net/different.html"];
        return fwCollection = new URICollection(subUrls);
      });
      it("should return a URIjs instance.", function() {
        var link;
        link = fwCollection.findWhere({
          domain: "burgerking.com"
        });
        return assert(link instanceof URI);
      });
      it("should convert a key-val query into a function invoking the correct instance method", function() {
        var link, _domain;
        _domain = "cowsjustcows.org";
        link = fwCollection.findWhere({
          domain: _domain
        });
        assert(link.domain() === _domain);
        return assert(link.toString() === subUrls[2]);
      });
      it("should return the first matching instance", function() {
        var _found;
        _found = fwCollection.findWhere({
          domain: "sploink.net"
        });
        return assert(_found.toString() === subUrls[1]);
      });
      return it("should return null if no match is found", function() {
        var _found;
        _found = fwCollection.findWhere({
          domain: "fakesite.net"
        });
        return assert(_found === null);
      });
    });
    describe("where", function() {
      var subUrls, whereCollection;
      subUrls = [];
      whereCollection = {};
      beforeEach(function() {
        subUrls = ["http://www.burgerking.com/", "http://www.sploink.net/", "http://www.cowsjustcows.org/", "http://www.sploink.net/different.html", "http://www.hatsoftheworld.co.jp", "http://www.justsam.net", "http://www.sploink.net/home.html"];
        return whereCollection = new URICollection(subUrls);
      });
      it("should return a URICollection instance.", function() {
        var matching;
        matching = whereCollection.where({
          domain: "burgerking.com"
        });
        return assert(matching instanceof URICollection);
      });
      it("should convert a key-val query into a function invoking the correct instance method", function() {
        var matching, _domain;
        _domain = "cowsjustcows.org";
        matching = whereCollection.where({
          domain: _domain
        });
        assert(matching.size() === 1);
        return assert(matching.at(0).toString() === subUrls[2]);
      });
      it("should return _every_ matching URIjs instance.", function() {
        var _found;
        _found = whereCollection.where({
          domain: "sploink.net"
        });
        return assert(_found.size() === 3);
      });
      it("should return _only_ matching URIjs instances.", function() {
        var found, foundList;
        found = whereCollection.where({
          domain: "sploink.net"
        });
        foundList = found.toArray();
        return _.each(foundList, function(foundElem) {
          return assert(foundElem.domain() === "sploink.net");
        });
      });
      return it("should return an empty URICollection instance if no matches are found.", function() {
        var found;
        found = whereCollection.where({
          domain: "nada.zabba"
        });
        assert(found instanceof URICollection);
        return assert(found.size() === 0);
      });
    });
    describe("sample", function() {
      it("should return a URIjs instance when called with no parameters or with n == 1.", function() {
        assert(collection.sample() instanceof URI);
        return assert(collection.sample(1) instanceof URI);
      });
      it("should return a URICollection instance when called with n > 1.", function() {
        return assert(collection.sample(2) instanceof URICollection);
      });
      return it("should return a URICollection with size == n when n > 1.", function() {
        var n, _j, _results1;
        _results1 = [];
        for (n = _j = 2; _j <= 4; n = ++_j) {
          _results1.push(assert(collection.sample(n).size() === n));
        }
        return _results1;
      });
    });
    describe("filter", function() {
      var filtCollection, subUrls;
      subUrls = [];
      filtCollection = {};
      beforeEach(function() {
        subUrls = ["http://www.burgerking.com/healthymealsatthepalace/", "http://www.sploink.net/", "http://www.cowsjustcows.org/", "http://www.pepsilovesyourdemographic.com", "http://www.buypostersorsomething.com", "http://www.sploink.net/different.html"];
        return filtCollection = new URICollection(subUrls);
      });
      it("should return a URICollection instance.", function() {
        var matching;
        matching = filtCollection.filter(function(uri) {
          return uri.tld() === "com";
        });
        return assert(matching instanceof URICollection);
      });
      it("should return all matches from the collection", function() {
        var matching;
        matching = filtCollection.filter(function(uri) {
          return uri.tld() === "com";
        });
        return assert(matching.size() === 3);
      });
      return it("should return the same result (count + deep-equal) as manual iteration over a plain array of the same URIs", function() {
        var arrayResult, collResult, filt, i, _j, _ref2, _results1;
        filt = function(elem) {
          return elem.tld() === "com";
        };
        arrayResult = _.filter(filtCollection.toArray(), filt);
        collResult = filtCollection.filter(filt);
        assert(arrayResult.length === collResult.size());
        _results1 = [];
        for (i = _j = 0, _ref2 = arrayResult.length - 1; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; i = 0 <= _ref2 ? ++_j : --_j) {
          _results1.push(assert(arrayResult[i].toString() === collResult.at(i).toString()));
        }
        return _results1;
      });
    });
    return describe("reject", function() {
      var rejCollection, subUrls;
      subUrls = [];
      rejCollection = {};
      beforeEach(function() {
        subUrls = ["http://www.burgerking.com/healthymealsatthepalace/", "http://www.sploink.net/", "http://www.cowsjustcows.org/", "http://www.pepsilovesyourdemographic.com", "http://www.buypostersorsomething.com", "http://www.sploink.net/different.html"];
        return rejCollection = new URICollection(subUrls);
      });
      it("should return a URICollection instance.", function() {
        var matching;
        matching = rejCollection.reject(function(uri) {
          return uri.tld() === "com";
        });
        return assert(matching instanceof URICollection);
      });
      it("should return all matches from the collection", function() {
        var matching;
        matching = rejCollection.reject(function(uri) {
          return uri.tld() === "net";
        });
        return assert(matching.size() === 4);
      });
      return it("should return the same result (count + deep-equal) as iteration over a plain array of the same URIs", function() {
        var arrayResult, collResult, i, rej, _j, _ref2, _results1;
        rej = function(elem) {
          return elem.tld() === "net";
        };
        arrayResult = _.reject(rejCollection.toArray(), rej);
        collResult = rejCollection.reject(rej);
        assert(arrayResult.length === collResult.size());
        _results1 = [];
        for (i = _j = 0, _ref2 = arrayResult.length - 1; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; i = 0 <= _ref2 ? ++_j : --_j) {
          _results1.push(assert(arrayResult[i].toString() === collResult.at(i).toString()));
        }
        return _results1;
      });
    });
  });

}).call(this);
