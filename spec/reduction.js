// Generated by CoffeeScript 1.6.3
(function() {
  var URI, URICollection, URLCOUNT, URL_INDICES, assert, isURI, urlList, _, _i, _ref, _ref1, _results;

  assert = require("better-assert");

  _ = require("underscore");

  _ref = require("../index.js"), URICollection = _ref.URICollection, isURI = _ref.isURI;

  URI = require("URIjs");

  urlList = ["http://www.google.com/foo", "http://www.cnn.com/theNewsIGuess", "http://www.foo.com/index.html", "http://www.powwow.net", "http://www.genericrecipes.net", "http://ihavefeelingsandiwriteaboutthem.wordpress.com", "http://justcats.tumblr.com"];

  URLCOUNT = urlList.length;

  URL_INDICES = (function() {
    _results = [];
    for (var _i = 0, _ref1 = URLCOUNT - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; 0 <= _ref1 ? _i++ : _i--){ _results.push(_i); }
    return _results;
  }).apply(this);

  describe("URICollection", function() {
    var domainCombiner, protocolCombiner, reduceCollection, subUrls;
    subUrls = [];
    reduceCollection = {};
    protocolCombiner = function(soFar, elem) {
      soFar += "" + (elem.protocol());
      return soFar;
    };
    domainCombiner = function(soFar, elem) {
      soFar += "" + (elem.domain());
      return soFar;
    };
    beforeEach(function() {
      subUrls = ["http://www.burgerking.com/", "http://www.sploink.net/", "http://www.cowsjustcows.org/", "http://www.sploink.net/different.html", "http://www.genericrecipes.net"];
      return reduceCollection = new URICollection(subUrls);
    });
    describe("reduce", function() {
      it("should not wrap its output in a URICollection.", function() {
        var catProtocols;
        catProtocols = reduceCollection.reduce(protocolCombiner, "");
        return assert(!(catProtocols instanceof URICollection));
      });
      it("should return the same result as iteration over a plain array of the same URIs.", function() {
        var arrayResult, collResult;
        collResult = reduceCollection.reduce(protocolCombiner, "");
        arrayResult = _.reduce(reduceCollection.toArray(), protocolCombiner, "");
        return assert(collResult === arrayResult);
      });
      return it("should return correct results.", function() {
        var collResult, i, _correct, _j, _ref2;
        collResult = reduceCollection.reduce(protocolCombiner, "");
        _correct = [];
        for (i = _j = 0, _ref2 = reduceCollection.size() - 1; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; i = 0 <= _ref2 ? ++_j : --_j) {
          _correct.push("http");
        }
        _correct = _correct.join("");
        return assert(collResult === _correct);
      });
    });
    return describe("reduceRight", function() {
      it("should not wrap its output in a URICollection.", function() {
        var catProtocols;
        catProtocols = reduceCollection.reduceRight(protocolCombiner, "");
        return assert(!(catProtocols instanceof URICollection));
      });
      it("should return the same result as iteration over a plain array of the same URIs.", function() {
        var arrayResult, collResult;
        collResult = reduceCollection.reduceRight(protocolCombiner, "");
        arrayResult = _.reduceRight(reduceCollection.toArray(), protocolCombiner, "");
        return assert(collResult === arrayResult);
      });
      it("should return correct results.", function() {
        var collResult, _correct;
        collResult = reduceCollection.reduceRight(domainCombiner, "");
        _correct = [];
        _correct = _.chain(reduceCollection.toArray()).map(function(el) {
          return el.domain();
        }).reverse().value().join("");
        return assert(collResult === _correct);
      });
      return it("should return different results than `reduce` when operation is non-associative", function() {
        var leftReduced, rightReduced;
        rightReduced = reduceCollection.reduceRight(domainCombiner, "");
        leftReduced = reduceCollection.reduce(domainCombiner, "");
        return assert(rightReduced !== leftReduced);
      });
    });
  });

}).call(this);
