// Generated by CoffeeScript 1.6.3
(function() {
  var URI, URICollection, assert, isURI, urlList, _, _ref;

  assert = require("better-assert");

  _ = require("underscore");

  _ref = require("../index.js"), URICollection = _ref.URICollection, isURI = _ref.isURI;

  URI = require("URIjs");

  urlList = ["http://www.google.com/foo", "http://www.cnn.com/theNewsIGuess", "http://www.foo.com/index.html"];

  describe("URICollection", function() {
    return describe("construction", function() {
      it("should accept a single URL string.", function() {
        var collection, _url;
        _url = urlList[0];
        collection = new URICollection(_url);
        assert(collection.size() === 1);
        return assert(collection.at(0).toString() === _url);
      });
      it("should accept multiple URL strings.", function() {
        var collection, _url1, _url2, _url3;
        _url1 = urlList[0];
        _url2 = urlList[1];
        _url3 = urlList[2];
        collection = new URICollection(_url1, _url2, _url3);
        assert(collection.size() === 3);
        assert(collection.at(0).toString() === _url1);
        assert(collection.at(1).toString() === _url2);
        return assert(collection.at(2).toString() === _url3);
      });
      it("should accept an array of multiple URL strings.", function() {
        var collection, i, _i, _ref1, _results, _urls;
        _urls = urlList.slice(0, 3);
        collection = new URICollection(_urls);
        assert(collection.size() === _urls.length);
        _results = [];
        for (i = _i = 0, _ref1 = _urls.length - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
          _results.push(assert(collection.at(i).toString() === _urls[i]));
        }
        return _results;
      });
      it("should accept an array with a single URL string.", function() {
        var collection, _url;
        _url = urlList[0];
        _url = [_url];
        collection = new URICollection(_url);
        assert(collection.size() === 1);
        return assert(collection.at(0).toString() === _url[0]);
      });
      it("should accept a single URIjs instance.", function() {
        var collection, _url;
        _url = new URI(urlList[0]);
        collection = new URICollection(_url);
        assert(collection.size() === 1);
        return assert(collection.at(0).toString() === _url.toString());
      });
      it("should accept multiple URIjs instances.", function() {
        var collection, _url1, _url2, _url3;
        _url1 = new URI(urlList[0]);
        _url2 = new URI(urlList[1]);
        _url3 = new URI(urlList[2]);
        collection = new URICollection(_url1, _url2, _url3);
        assert(collection.size() === 3);
        assert(collection.at(0).toString() === _url1.toString());
        assert(collection.at(1).toString() === _url2.toString());
        return assert(collection.at(2).toString() === _url3.toString());
      });
      it("should accept an array of multiple URIjs instances.", function() {
        var collection, i, _i, _ref1, _results, _urls;
        _urls = _.map(urlList.slice(0, 3), function(aUrl) {
          return new URI(aUrl);
        });
        collection = new URICollection(_urls);
        assert(collection.size() === _urls.length);
        _results = [];
        for (i = _i = 0, _ref1 = _urls.length - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
          _results.push(assert(collection.at(i).toString() === _urls[i].toString()));
        }
        return _results;
      });
      return it("should accept an array with a single URIjs instance.", function() {
        var collection, _url;
        _url = new URI(urlList[0]);
        _url = [_url];
        collection = new URICollection(_url);
        assert(collection.size() === 1);
        return assert(collection.at(0).toString() === _url[0].toString());
      });
    });
  });

}).call(this);
