[
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object",
          "Array"
        ],
        "name": "linkList",
        "description": "A single link, multiple links, or an array of links. A given link can be an existing URIjs instance or a string, which will be converted into a URIjs instance."
      },
      {
        "type": "return",
        "types": [
          "URICollection"
        ],
        "description": "A reference to the same URICollection (i.e. chained)."
      }
    ],
    "description": {
      "full": "<p>Add URIs to the collection.</p>",
      "summary": "<p>Add URIs to the collection.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.add = function() {\n      var linkList, _uris;\n      linkList = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      linkList = _.flatten(linkList);\n      _uris = this._uris;\n      _.each(linkList, function(aLink) {\n        if (!isURI(aLink)) {\n          aLink = new URI(aLink);\n        }\n        return _uris.push(aLink);\n      });\n      return this;\n    };",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "add",
      "string": "URICollection.prototype.add()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object",
          "Array"
        ],
        "name": "linkList",
        "description": "A single link, multiple links, or an array of links. A given link can be an existing URIjs instance or a string, which will be converted into a URIjs instance."
      },
      {
        "type": "return",
        "types": [
          "URICollection"
        ],
        "description": "A reference to the same URICollection (i.e. chained)."
      }
    ],
    "description": {
      "full": "<p>Alias for <code>#add()</code></p>",
      "summary": "<p>Alias for <code>#add()</code></p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.push = function() {\n      var linkList;\n      linkList = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      this.add(_.flatten(linkList));\n      return this;\n    };",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "push",
      "string": "URICollection.prototype.push()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "Array"
        ],
        "description": "An array of URI strings."
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Returns an array of URI strings created by calling <code>#toString()</code> on each URIjs instance in the collection.</p>",
      "summary": "<p>Returns an array of URI strings created by calling <code>#toString()</code> on each URIjs instance in the collection.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.toString = function() {\n      var _strings;\n      _strings = _.map(this._uris, function(oneLink) {\n        return oneLink.toString();\n      });\n      return _strings;\n    };",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "toString",
      "string": "URICollection.prototype.toString()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "Array"
        ],
        "description": "An array of URIjs instances."
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Returns a plain array of cloned URIjs instances matching those in the collection. </p>",
      "summary": "<p>Returns a plain array of cloned URIjs instances matching those in the collection. </p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.toArray = function() {\n      var _uris;\n      _uris = cloneUris(this._uris);\n      return _uris;\n    };",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "toArray",
      "string": "URICollection.prototype.toArray()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Number"
        ],
        "name": "i",
        "description": "The index of the instance to clone."
      },
      {
        "type": "return",
        "types": [
          "URI"
        ],
        "description": "A clone of the corresponding URIjs instance from the collection."
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Returns a clone of the URIjs instance at index <code>i</code>. </p>",
      "summary": "<p>Returns a clone of the URIjs instance at index <code>i</code>. </p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.at = function(index) {\n      if (index < 0) {\n        index = this.size() + index;\n      }\n      if (this._uris[index] != null) {\n        return this._uris[index].clone();\n      } else {\n        return null;\n      }\n    };",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "at",
      "string": "URICollection.prototype.at()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Number"
        ],
        "name": "i",
        "description": "The index of the instance to call `#toString()` on."
      },
      {
        "type": "return",
        "types": [
          "String"
        ],
        "description": "The string returned from calling `#toString()` on the instance."
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Returns the <code>#toString()</code> result of the URIjs instance at index <code>i</code>. </p>",
      "summary": "<p>Returns the <code>#toString()</code> result of the URIjs instance at index <code>i</code>. </p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.stringAt = function(index) {\n      return this._uris[index].toString();\n    };\n\n    return URICollection;\n\n  })();",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "stringAt",
      "string": "URICollection.prototype.stringAt()"
    }
  },
  {
    "tags": [
      {
        "type": "return",
        "types": [
          "URICollection"
        ],
        "description": "A new URICollection."
      },
      {
        "type": "api",
        "visibility": "public"
      }
    ],
    "description": {
      "full": "<p>Returns a new URICollection instance containing clones of the same URIs.</p>",
      "summary": "<p>Returns a new URICollection instance containing clones of the same URIs.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.clone = function() {\n    var _uris;\n    _uris = cloneUris(this._uris);\n    return new URICollection(_uris);\n  };\n\n  _collectionReturningMethods = [\"filter\", \"reject\", \"shuffle\"];\n\n  _.each(_collectionReturningMethods, function(aMethod) {\n    return URICollection.prototype[aMethod] = function() {\n      var params, _result, _uris;\n      params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      _uris = cloneUris(this._uris);\n      params.unshift(_uris);\n      _result = _[aMethod].apply(null, params);\n      return new URICollection(_result);\n    };\n  });\n\n  _nonCollectionReturningMethods = [\"reduce\", \"reduceRight\", \"some\", \"every\", \"size\"];\n\n  _.each(_nonCollectionReturningMethods, function(aMethod) {\n    return URICollection.prototype[aMethod] = function() {\n      var params, _uris;\n      params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      _uris = cloneUris(this._uris);\n      params.unshift(_uris);\n      return _[aMethod].apply(null, params);\n    };\n  });",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "clone",
      "string": "URICollection.prototype.clone()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Number"
        ],
        "name": "n",
        "description": "The number of elements to return, defaulting to 1."
      },
      {
        "type": "return",
        "types": [
          "URICollection",
          "URI"
        ],
        "description": "If `n > 1`, returns a `URICollection`. If `n===1` or `typeof n === 'null'`, returns a cloned URIjs instance."
      }
    ],
    "description": {
      "full": "<p>Returns the first <code>n</code> list elements.</p>",
      "summary": "<p>Returns the first <code>n</code> list elements.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.first = function(n) {\n    var _origUris;\n    if ((n != null) && n !== 1) {\n      _origUris = _.first(this._uris, n);\n      return new URICollection(cloneUris(_origUris));\n    } else {\n      return this.at(0).clone();\n    }\n  };",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "first",
      "string": "URICollection.prototype.first()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Number"
        ],
        "name": "n",
        "description": "The number of elements to return, defaulting to 1."
      },
      {
        "type": "return",
        "types": [
          "URICollection",
          "URI"
        ],
        "description": "If `n > 1`, returns a `URICollection`. If `n===1` or `typeof n === 'null'`, returns a cloned URIjs instance."
      }
    ],
    "description": {
      "full": "<p>Returns the last <code>n</code> list elements.</p>",
      "summary": "<p>Returns the last <code>n</code> list elements.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.last = function(n) {\n    var _origUris;\n    if ((n != null) && n !== 1) {\n      _origUris = _.last(this._uris, n);\n      return new URICollection(cloneUris(_origUris));\n    } else {\n      return this.at(this.size() - 1).clone();\n    }\n  };",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "last",
      "string": "URICollection.prototype.last()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Number"
        ],
        "name": "n",
        "description": "The index to start copying from, defaulting to 1."
      },
      {
        "type": "return",
        "types": [
          "URICollection"
        ],
        "description": "A URICollection instance, even if only one element is returned. This is in line with Underscore's behavior."
      }
    ],
    "description": {
      "full": "<p>Returns a new URICollection with copies of the elements from index <code>n</code> to the end.</p>",
      "summary": "<p>Returns a new URICollection with copies of the elements from index <code>n</code> to the end.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.rest = function(n) {\n    var _origUris;\n    if (n == null) {\n      n = 1;\n    }\n    _origUris = _.rest(this._uris, n);\n    return new URICollection(cloneUris(_origUris));\n  };",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "rest",
      "string": "URICollection.prototype.rest()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Number"
        ],
        "name": "n",
        "description": "The number of ending elements to omit, defaulting to 1."
      },
      {
        "type": "return",
        "types": [
          "URICollection"
        ],
        "description": "A URICollection instance, even if only one element is returned. This is in line with Underscore's behavior."
      }
    ],
    "description": {
      "full": "<p>Returns a new URICollection with copies of the elements from from index 0 up to index <code>#length() - n</code>.</p>",
      "summary": "<p>Returns a new URICollection with copies of the elements from from index 0 up to index <code>#length() - n</code>.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.initial = function(n) {\n    var _origUris;\n    if (n == null) {\n      n = 1;\n    }\n    _origUris = _.initial(this._uris, n);\n    return new URICollection(cloneUris(_origUris));\n  };",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "initial",
      "string": "URICollection.prototype.initial()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Object",
          "RegExp"
        ],
        "name": "val",
        "description": "The value to search for."
      },
      {
        "type": "return",
        "types": [
          "Boolean"
        ],
        "description": "`true` if the collection contains the value; `false` otherwise."
      }
    ],
    "description": {
      "full": "<p>Predicate function indicating whether the collection contains the passed URI, given as a string, <code>URIjs</code> instance, or <code>RegExp</code>.</p>\n\n<p>The comparison is against the array of <code>#toString()</code> results of the collection's elements.</p>\n\n<p>If a URIjs instance is passed in as <code>val</code>, its own <code>#toString()</code> is used for comparison.</p>\n\n<p>If a RegExp instance is passed in as <code>val</code>, the result is determined by calling its <code>#.test()</code> method with each collection element's <code>#toString()</code>, short-circuiting when any returns true.</p>",
      "summary": "<p>Predicate function indicating whether the collection contains the passed URI, given as a string, <code>URIjs</code> instance, or <code>RegExp</code>.</p>",
      "body": "<p>The comparison is against the array of <code>#toString()</code> results of the collection's elements.</p>\n\n<p>If a URIjs instance is passed in as <code>val</code>, its own <code>#toString()</code> is used for comparison.</p>\n\n<p>If a RegExp instance is passed in as <code>val</code>, the result is determined by calling its <code>#.test()</code> method with each collection element's <code>#toString()</code>, short-circuiting when any returns true.</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.contains = function(val) {\n    var _stringUris;\n    _stringUris = this._strungList();\n    if (_.isString(val)) {\n      return _.contains(_stringUris, val);\n    } else if (val instanceof URI) {\n      return _.contains(_stringUris, val.toString());\n    } else if (_.isRegExp(val)) {\n      return _.some(_stringUris, function(aString) {\n        return val.test(aString);\n      });\n    }\n    throw new Error(\"Unrecognized value passed for URICollection.contains: \" + val);\n  };",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "contains",
      "string": "URICollection.prototype.contains()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "testFn",
        "description": "The truth-testing function which will iterate over collection elements, short-circuiting at the first to return true."
      },
      {
        "type": "return",
        "types": [
          "URI",
          "null"
        ],
        "description": "If a result is found, a clone of the matching `URIjs` instance. Otherwise, returns `null`."
      }
    ],
    "description": {
      "full": "<p>Accepts a truth-testing function and returns the first element to cause a <code>true</code> return value.  Proxies to Underscore's <code>_.find</code>, but returns a cloned URIjs instance to ensure immutability of collection elements.</p>",
      "summary": "<p>Accepts a truth-testing function and returns the first element to cause a <code>true</code> return value.  Proxies to Underscore's <code>_.find</code>, but returns a cloned URIjs instance to ensure immutability of collection elements.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.find = function(testfn) {\n    var result, _uris;\n    _uris = cloneUris(this._uris);\n    result = _.find(_uris, iterFn);\n    if (result != null) {\n      return result;\n    }\n    return null;\n  };",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "find",
      "string": "URICollection.prototype.find()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "iterFn",
        "description": "The iterator function which will be called with each collection element in sequence."
      },
      {
        "type": "return",
        "types": [
          "URICollection"
        ],
        "description": "A URICollection instance created by applying `iterFn` to each of a cloned array of internal `URIjs` instances."
      }
    ],
    "description": {
      "full": "<p>Accepts an iterator function and applies it to a cloned list of collection elements, returning a new <code>URICollection</code> instance with the results.</p>\n\n<p>This is distinct from <code>#map()</code> because this implementation of <code>#each()</code> <em>always</em> returns a new URICollection, even if <code>iterFn</code> doesn't have any return value.  <code>#map()</code> only returns a new URICollection if it results in an array of <code>URIjs</code> instances. </p>\n\n<p>No changes are made to the original collection elements.</p>",
      "summary": "<p>Accepts an iterator function and applies it to a cloned list of collection elements, returning a new <code>URICollection</code> instance with the results.</p>",
      "body": "<p>This is distinct from <code>#map()</code> because this implementation of <code>#each()</code> <em>always</em> returns a new URICollection, even if <code>iterFn</code> doesn't have any return value.  <code>#map()</code> only returns a new URICollection if it results in an array of <code>URIjs</code> instances. </p>\n\n<p>No changes are made to the original collection elements.</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.each = function(iterFn) {\n    var _results, _uris;\n    _uris = cloneUris(this._uris);\n    _results = _.map(_uris, iterFn);\n    return new URICollection(_results);\n  };",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "each",
      "string": "URICollection.prototype.each()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Function"
        ],
        "name": "mapFn",
        "description": "The iterator function which will be called with each collection element in sequence."
      },
      {
        "type": "return",
        "types": [
          "Array",
          "URICollection"
        ],
        "description": "Either a new `URICollection` (if an array of `URIjs` instances are returned) or a plain array of results (e.g. if strings of element hostnames are returned.)"
      }
    ],
    "description": {
      "full": "<p>Accepts an iterator function and applies it to a cloned list of collection elements.  Depending on the iterator's output, this method will either return a new <code>URICollection</code> instance or a plain array.</p>\n\n<p>If the <code>mapFn</code> returns an array of <code>URIjs</code> instances, they will be wrapped in a new <code>URICollection</code> and returned.  If it returns another type of result, the plain array will be returned to the client.</p>\n\n<p>A given map operation's outputs are assumed to be homogeneous with respect to type, so the type of the internal array resulting from proxying to <code>_.map(list, mapFn)</code> is determined by testing only the first element. </p>\n\n<p>No changes are made to the original collection elements.</p>",
      "summary": "<p>Accepts an iterator function and applies it to a cloned list of collection elements.  Depending on the iterator's output, this method will either return a new <code>URICollection</code> instance or a plain array.</p>",
      "body": "<p>If the <code>mapFn</code> returns an array of <code>URIjs</code> instances, they will be wrapped in a new <code>URICollection</code> and returned.  If it returns another type of result, the plain array will be returned to the client.</p>\n\n<p>A given map operation's outputs are assumed to be homogeneous with respect to type, so the type of the internal array resulting from proxying to <code>_.map(list, mapFn)</code> is determined by testing only the first element. </p>\n\n<p>No changes are made to the original collection elements.</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.map = function() {\n    var params, _results, _uris;\n    params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n    _uris = cloneUris(this._uris);\n    params.unshift(_uris);\n    _results = _.map.apply(null, params);\n    if (isURI(_results[0])) {\n      return new URICollection(_results);\n    } else {\n      return _results;\n    }\n  };",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "map",
      "string": "URICollection.prototype.map()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "methodName",
        "description": "A string representing the method name to invoke on each collection element."
      },
      {
        "type": "param",
        "types": [
          "Array"
        ],
        "name": "args",
        "description": "(Optional) Additional arguments to pass when invoking `methodName`."
      },
      {
        "type": "return",
        "types": [
          "Array",
          "URICollection"
        ],
        "description": "If no additional arguments are passed, a plain array of results. Otherwise, a new URICollection wrapping clones of the URIjs elements from the original collection."
      }
    ],
    "description": {
      "full": "<p>Accepts a method name and optional additional arguments to pass to that method, and invokes the given method on each URIjs instance in the collection.</p>\n\n<p>Because <code>URIjs</code> methods without argument return attribute information - e.g. <code>uri.domain()</code> returns the string-format URI domain - a plain array of results is returned if no additional arguments are supplied.</p>\n\n<p>Calling <code>URIjs</code> methods with arguments generally causes mutation and returns the object - e.g. <code>uri.domain(\"justcats.net\")</code> returns the same object with its domain changed to <code>justcats.net</code>.  For this reason, passing additional arguments causes the result to be wrapped in a new URICollection instance.</p>\n\n<p>No changes are made to the original collection elements.</p>",
      "summary": "<p>Accepts a method name and optional additional arguments to pass to that method, and invokes the given method on each URIjs instance in the collection.</p>",
      "body": "<p>Because <code>URIjs</code> methods without argument return attribute information - e.g. <code>uri.domain()</code> returns the string-format URI domain - a plain array of results is returned if no additional arguments are supplied.</p>\n\n<p>Calling <code>URIjs</code> methods with arguments generally causes mutation and returns the object - e.g. <code>uri.domain(\"justcats.net\")</code> returns the same object with its domain changed to <code>justcats.net</code>.  For this reason, passing additional arguments causes the result to be wrapped in a new URICollection instance.</p>\n\n<p>No changes are made to the original collection elements.</p>"
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.invoke = function() {\n    var params, _method, _results, _uris;\n    params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n    if (params.length === 1) {\n      _method = params[0];\n      _results = _.map(this._uris, function(oneUri) {\n        return oneUri[_method]();\n      });\n      return _results;\n    } else {\n      _uris = cloneUris(this._uris);\n      params.unshift(_uris);\n      _results = _.invoke.apply(null, params);\n      return new URICollection(_results);\n    }\n  };",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "invoke",
      "string": "URICollection.prototype.invoke()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Function"
        ],
        "name": "groupingMethod",
        "description": "A string representing a method to invoke on each element, grouping by the output, or a function which is passed each element in sequence and calculates the correct group key."
      },
      {
        "type": "param",
        "types": [
          "Boolean"
        ],
        "name": "asStrings",
        "description": "(Optional) If `true` is passed, the value for each group key on the returned object will be an array of URI strings instead of URICollections."
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "An object with keys determined by the grouping criteria, with URICollections as the values. If `asStrings=true`, the values are converted to arrays of URI strings."
      }
    ],
    "description": {
      "full": "<p>Accepts a property name or a function and uses it to create a plain Javascript object with the collection's elements keyed by the results of the grouping function or property.</p>",
      "summary": "<p>Accepts a property name or a function and uses it to create a plain Javascript object with the collection's elements keyed by the results of the grouping function or property.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.groupBy = function(propOrFunc, asStrings) {\n    var groupFn, _finalResults, _results, _uris;\n    _uris = cloneUris(this._uris);\n    if (_.isString(propOrFunc)) {\n      groupFn = function(listElem) {\n        return _.result(listElem, propOrFunc);\n      };\n    } else {\n      groupFn = propOrFunc;\n    }\n    _results = _.groupBy(_uris, groupFn);\n    _finalResults = _results;\n    if (asStrings === true) {\n      _finalResults = _.chain(_results).pairs().map(function(aPair) {\n        return [\n          aPair[0], _.map(aPair[1], function(el) {\n            return el.toString();\n          })\n        ];\n      }).object().value();\n    } else {\n      _finalResults = _.chain(_results).pairs().map(function(aPair) {\n        return [aPair[0], new URICollection(aPair[1])];\n      }).object().value();\n    }\n    return _finalResults;\n  };",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "groupBy",
      "string": "URICollection.prototype.groupBy()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Function"
        ],
        "name": "countingMethod",
        "description": "A string representing a method to invoke on each element, counting by the output, or a function which is passed each element in sequence and calculates the correct result to count by."
      },
      {
        "type": "return",
        "types": [
          "Object"
        ],
        "description": "An object with keys determined by the counting criteria, with `Number` values corresponding to the number of times a given key was returned."
      }
    ],
    "description": {
      "full": "<p>Accepts a property name or a function and uses it to create a plain Javascript object keyed by the outputs of the counting function, with values equal to the number of times a given output was returned.</p>",
      "summary": "<p>Accepts a property name or a function and uses it to create a plain Javascript object keyed by the outputs of the counting function, with values equal to the number of times a given output was returned.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.countBy = function(propOrFunc) {\n    var countFn, _results, _uris;\n    if (_.isString(propOrFunc)) {\n      _uris = this._uris;\n      countFn = function(listElem) {\n        return _.result(listElem, propOrFunc);\n      };\n    } else {\n      _uris = cloneUris(this._uris);\n      countFn = propOrFunc;\n    }\n    return _results = _.countBy(_uris, countFn);\n  };",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "countBy",
      "string": "URICollection.prototype.countBy()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String",
          "Function"
        ],
        "name": "sortingMethod",
        "description": "A string representing a method to invoke on each element, returning a value used to sort by, or a function which is passed each element in sequence and calculates the correct value to sort by."
      },
      {
        "type": "return",
        "types": [
          "URICollection"
        ],
        "description": "A new collection with elements sorted according to the returned sorting criteria."
      }
    ],
    "description": {
      "full": "<p>Accepts a method name or a function and uses it to create a new URICollection with elements ordered by the function output or method invocation output for each object.</p>",
      "summary": "<p>Accepts a method name or a function and uses it to create a new URICollection with elements ordered by the function output or method invocation output for each object.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.sortBy = function(propOrFunc) {\n    var sortFn, _results, _uris;\n    _uris = cloneUris(this._uris);\n    if (_.isString(propOrFunc)) {\n      sortFn = function(listElem) {\n        return _.result(listElem, propOrFunc);\n      };\n    } else {\n      sortFn = propOrFunc;\n    }\n    _results = _.sortBy(_uris, sortFn);\n    return new URICollection(_results);\n  };",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "sortBy",
      "string": "URICollection.prototype.sortBy()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "propertyName",
        "description": "A string representing the property to pluck from each collection element."
      },
      {
        "type": "return",
        "types": [
          "Array"
        ],
        "description": "A plain array of results."
      }
    ],
    "description": {
      "full": "<p>Accepts a property name and returns a plain array with the value of that property for each element in the collection.<br />Similar to Underscore's own <code>_.pluck</code> but internally uses _.resolve in a map operation, because URIjs properties are all returned by methods. </p>",
      "summary": "<p>Accepts a property name and returns a plain array with the value of that property for each element in the collection.<br />Similar to Underscore's own <code>_.pluck</code> but internally uses _.resolve in a map operation, because URIjs properties are all returned by methods. </p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.pluck = function(attrib) {\n    var _results, _uris;\n    _uris = this._uris;\n    _results = _.map(_uris, function(oneUri) {\n      return _.result(oneUri, attrib);\n    });\n    return _results;\n  };",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "pluck",
      "string": "URICollection.prototype.pluck()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "queryObject",
        "description": "A plain Javascript object containing properties to match, e.g. `{domain: 'google.com'}`"
      },
      {
        "type": "return",
        "types": [
          "URICollection"
        ],
        "description": "A new URICollection instance."
      }
    ],
    "description": {
      "full": "<p>Accepts a query object and returns all collection elements with properties matching the key-value pairs in that object.</p>",
      "summary": "<p>Accepts a query object and returns all collection elements with properties matching the key-value pairs in that object.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.where = function(whereObject) {\n    var _pred, _results;\n    _pred = compileWhereObjectIntoPredicate(whereObject);\n    _results = _.chain(this._uris).filter(_pred).map(function(aUri) {\n      return aUri.clone();\n    }).value();\n    return new URICollection(_results);\n  };",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "where",
      "string": "URICollection.prototype.where()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "queryObject",
        "description": "A plain Javascript object containing properties to match, e.g. `{domain: 'google.com'}`"
      },
      {
        "type": "return",
        "types": [
          "URI"
        ],
        "description": "A clone of the first `URIjs` element in the collection matching the query."
      }
    ],
    "description": {
      "full": "<p>Accepts a query object and returns the first collection element with properties matching the key-value pairs in that object.  Like <code>#where()</code>, but only returns the first result and does not wrap it in a collection - it returns a <code>URIjs</code> instance.</p>",
      "summary": "<p>Accepts a query object and returns the first collection element with properties matching the key-value pairs in that object.  Like <code>#where()</code>, but only returns the first result and does not wrap it in a collection - it returns a <code>URIjs</code> instance.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.findWhere = function(whereObject) {\n    var _pred, _result;\n    _pred = compileWhereObjectIntoPredicate(whereObject);\n    _result = _.find(this._uris, _pred);\n    if (_result == null) {\n      return null;\n    }\n    return _result.clone();\n  };",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "findWhere",
      "string": "URICollection.prototype.findWhere()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Number"
        ],
        "name": "n",
        "description": "The number of elements to return in the sample, defaulting to 1."
      },
      {
        "type": "return",
        "types": [
          "URICollection",
          "URI"
        ],
        "description": "A URICollection instance if `n > 1`, or a `URIjs` instance otherwise."
      }
    ],
    "description": {
      "full": "<p>Returns <code>n</code> randomly selected elements from the collection.  If <code>n==1</code> or <code>typeof n === \"null\"</code>, returns a <code>URIjs</code> instance.  If <code>n &gt; 1</code>, returns a new <code>URICollection</code> instance.</p>",
      "summary": "<p>Returns <code>n</code> randomly selected elements from the collection.  If <code>n==1</code> or <code>typeof n === \"null\"</code>, returns a <code>URIjs</code> instance.  If <code>n &gt; 1</code>, returns a new <code>URICollection</code> instance.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "URICollection.prototype.sample = function(n) {\n    var params, sample, _results, _uris;\n    if ((n != null) && n !== 1) {\n      _uris = cloneUris(this._uris);\n      params = [_uris, n];\n      _results = _.sample.apply(null, params);\n      return new URICollection(_results);\n    } else {\n      sample = _.sample(this._uris);\n      return sample.clone();\n    }\n  };\n\n  module.exports = {\n    URICollection: URICollection,\n    isURI: isURI\n  };\n\n}).call(this);",
    "ctx": {
      "type": "method",
      "constructor": "URICollection",
      "cons": "URICollection",
      "name": "sample",
      "string": "URICollection.prototype.sample()"
    }
  }
]