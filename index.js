// Generated by CoffeeScript 1.6.3
(function() {
  var URI, URICollection, cloneUris, compileWhereObjectIntoPredicate, isURI, log, _, _collectionReturningMethods, _nonCollectionReturningMethods,
    __slice = [].slice;

  URI = require("URIjs");

  _ = require("underscore");

  log = function(msg) {
    return console.log(msg);
  };

  compileWhereObjectIntoPredicate = function(whereObj) {
    var _count, _predicate, _tests;
    _tests = _.pairs(whereObj);
    _count = _tests.length - 1;
    return _predicate = function(listElem) {
      var elemVal, i, _i;
      for (i = _i = 0; 0 <= _count ? _i <= _count : _i >= _count; i = 0 <= _count ? ++_i : --_i) {
        elemVal = _.result(listElem, _tests[i][0]);
        console.log(elemVal);
        if (elemVal !== _tests[i][1]) {
          return false;
        }
      }
      return true;
    };
  };

  cloneUris = function(uriList) {
    var _cloned;
    if (_.isArray(uriList)) {
      _cloned = _.map(uriList, function(oneUri) {
        return oneUri.clone();
      });
    } else {
      _cloned = uriList.clone(0);
    }
    return _cloned;
  };

  isURI = function(aUri) {
    if (_.isString(aUri)) {
      return false;
    }
    if ((aUri.constructor != null) && (aUri.constructor.prototype != null)) {
      if (_.isFunction(aUri.constructor.prototype.domain)) {
        return true;
      }
    }
    return false;
  };

  URICollection = (function() {
    function URICollection() {
      var initialLinks;
      initialLinks = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this._uris = [];
      if (initialLinks != null) {
        this.add(initialLinks);
      }
    }

    URICollection.prototype.add = function() {
      var linkList, _uris;
      linkList = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      linkList = _.flatten(linkList);
      _uris = this._uris;
      _.each(linkList, function(aLink) {
        if (!isURI(aLink)) {
          aLink = new URI(aLink);
        }
        return _uris.push(aLink);
      });
      return this;
    };

    URICollection.prototype.push = function() {
      var linkList;
      linkList = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.add(_.flatten(linkList));
      return this;
    };

    URICollection.prototype.toString = function() {
      var _strings;
      _strings = _.map(this._uris, function(oneLink) {
        return oneLink.toString();
      });
      return _strings;
    };

    URICollection.prototype.strung = function() {
      var _strings;
      _strings = this.toString();
      return _strings.join("\n");
    };

    URICollection.prototype.toArray = function() {
      var _uris;
      _uris = cloneUris(this._uris);
      return _uris;
    };

    URICollection.prototype.at = function(index) {
      return this._uris[index].clone();
    };

    URICollection.prototype.stringAt = function(index) {
      return this._uris[index].toString();
    };

    return URICollection;

  })();

  URICollection.prototype.toArray = function() {
    var _uris;
    _uris = cloneUris(this._uris);
    return _uris;
  };

  URICollection.prototype.clone = function() {
    var _uris;
    _uris = cloneUris(this._uris);
    return new URICollection(_uris);
  };

  _collectionReturningMethods = ["filter", "reject", "sortBy", "shuffle", "initial"];

  _.each(_collectionReturningMethods, function(aMethod) {
    return URICollection.prototype[aMethod] = function() {
      var params, _result, _uris;
      params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _uris = cloneUris(this._uris);
      params.unshift(_uris);
      _result = _[aMethod].apply(null, params);
      return new URICollection(_result);
    };
  });

  _nonCollectionReturningMethods = ["reduce", "reduceRight", "find", "some", "contains", "max", "min", "size", "first", "last", "rest"];

  _.each(_nonCollectionReturningMethods, function(aMethod) {
    return URICollection.prototype[aMethod] = function() {
      var params, _uris;
      params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _uris = cloneUris(this._uris);
      params.unshift(_uris);
      return _[aMethod].apply(null, params);
    };
  });

  URICollection.prototype.each = function(iterFn) {
    var _results, _uris;
    _uris = cloneUris(this._uris);
    _results = _.map(_uris, iterFn);
    return new URICollection(_results);
  };

  URICollection.prototype.map = function() {
    var params, _results, _uris;
    params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _uris = cloneUris(this._uris);
    params.unshift(_uris);
    _results = _.map.apply(null, params);
    if (isURI(_results[0])) {
      return new URICollection(_results);
    } else {
      return _results;
    }
  };

  URICollection.prototype.invoke = function() {
    var params, _method, _results, _uris;
    params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (params.length === 1) {
      _method = params[0];
      _results = _.map(this._uris, function(oneUri) {
        return oneUri[_method]();
      });
      return results;
    } else {
      _uris = cloneUris(this._uris);
      params.unshift(_uris);
      _results = _.invoke.apply(null, params);
      return new URICollection(_results);
    }
  };

  URICollection.prototype.groupBy = function(propOrFunc, asStrings) {
    var groupFn, _finalResults, _results, _uris;
    _uris = cloneUris(this._uris);
    if (_.isString(propOrFunc)) {
      groupFn = function(listElem) {
        return _.result(listElem, propOrFunc);
      };
    } else {
      groupFn = propOrfunc;
    }
    _results = _.groupBy(_uris, groupFn);
    _finalResults = _results;
    if (asStrings === true) {
      _finalResults = _.chain(_results).pairs().map(function(aPair) {
        return [
          aPair[0], _.map(aPair[1], function(el) {
            return el.toString();
          })
        ];
      }).object().value();
    }
    return _finalResults;
  };

  URICollection.prototype.countBy = function(propOrFunc, asStrings) {
    var countFn, _results, _uris;
    if (_.isString(propOrFunc)) {
      _uris = this._uris;
      countFn = function(listElem) {
        return _.result(listElem, propOrFunc);
      };
    } else {
      _uris = cloneUris(_uris);
      countFn = propOrFunc;
    }
    return _results = _.countBy(_uris, countFn);
  };

  URICollection.prototype.pluck = function(attrib) {
    var _results, _uris;
    _uris = this._uris;
    _results = _.map(_uris, function(oneUri) {
      return _.result(oneUri, attrib);
    });
    return _results;
  };

  URICollection.prototype.where = function(whereObject) {
    var _pred, _results;
    _pred = compileWhereObjectIntoPredicate(whereObject);
    _results = _.chain(this._uris).filter(_pred).map(function(aUri) {
      return aUri.clone();
    }).value();
    return new URICollection(_results);
  };

  URICollection.prototype.findWhere = function(whereObject) {
    var _pred, _result;
    _pred = compileWhereObjectIntoPredicate(whereObject);
    _result = _.find(this._uris, _pred);
    return _result.clone();
  };

  URICollection.prototype.sample = function(n) {
    var params, sample, _results, _uris;
    if ((n != null) && n !== 1) {
      _uris = cloneUris(this._uris);
      params = [_uris, n];
      _results = _.sample.apply(null, params);
      return new URICollection(_results);
    } else {
      sample = _.sample(this._uris);
      return sample.clone();
    }
  };

  /*
  links = [
  	"http://www.cnn.com/somepage#para?q=aSearch"
  	"http://www.google.com"
  	"http://www.google.com/mail"
  	"http://www.reddit.com/r/stuff"
  ]
  
  uris = new URICollection()
  uris.add(links)
  
  notCnn = uris.filter (oneUri) ->
  	#console.log oneUri.domain()
  	oneUri.domain() isnt "cnn.com"
  
  pandas = uris.map (aUri) -> 
  	aUri.domain("pandakingdom.com")
  */


  /*
  console.log pandas.strung()
  
  console.log uris.sample(2).pluck("domain")
  
  console.log uris.map( (uri) -> uri.domain("microsoft.com").protocol("ftp") ).toString()
  console.log uris.toString()
  
  console.log uris.where( {domain: 'reddit.com'} ).toString()
  
  console.log uris.groupBy("domain", true)
  
  console.log uris.findWhere( {domain: 'google.com'}).toString()
  
  console.log uris.countBy("domain")
  
  console.log uris.size()
  */


  /*
  	filter: (pred) ->
  		_match = []
  		_.each @_uris, (oneUri) ->
  			if pred(oneUri) then _match.push(oneUri)
  		return new URICollection(_match)
  */


  module.exports = {
    URICollection: URICollection,
    isURI: isURI
  };

}).call(this);
